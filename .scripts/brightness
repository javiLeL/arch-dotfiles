#!/bin/bash

#   ▄▄▄██▀▀▀ ▄▄▄       ██▒   █▓ ██▓      ██▓    ▓█████  ██▓    
#     ▒██   ▒████▄    ▓██░   █▒▓██▒     ▓██▒    ▓█   ▀ ▓██▒    
#     ░██   ▒██  ▀█▄   ▓██  █▒░▒██▒     ▒██░    ▒███   ▒██░    
#  ▓██▄██▓  ░██▄▄▄▄██   ▒██ █░░░██░     ▒██░    ▒▓█  ▄ ▒██░    
#   ▓███▒    ▓█   ▓██▒   ▒▀█░  ░██░ ██▓ ░██████▒░▒████▒░██████▒
#   ▒▓▒▒░    ▒▒   ▓▒█░   ░ ▐░  ░▓   ▒▓▒ ░ ▒░▓  ░░░ ▒░ ░░ ▒░▓  ░
#   ▒ ░▒░     ▒   ▒▒ ░   ░ ░░   ▒ ░ ░▒  ░ ░ ▒  ░ ░ ░  ░░ ░ ▒  ░
#   ░ ░ ░     ░   ▒        ░░   ▒ ░ ░     ░ ░      ░     ░ ░   
#   ░   ░         ░  ░      ░   ░    ░      ░  ░   ░  ░    ░  ░
#                          ░         ░                         

down(){
    TODOWN=5
    if [ $1 != "" ]; then
        TODOWN=$1
    fi 
    brightnessctl s "$TODOWN%-" 
}
add(){
    TOADD=5
    if [ $1 != "" ]; then
        TOADD=$1
    fi
    brightnessctl s "+$TOADD%" 
}
print_usage(){
    cat<<EOF
Usage Options:

Syntaxis: [option] <arguments>
        
        -h      --help          Display this text mensaje
        -a      --add           By default add 5
        -d      --down          By default down 5

EOF
}
if [ "$#" == "0" ]; then
    cat << EFO
Usage -h or --help for more information 
EFO
else        
    while getopts "had:-:" flags; do
        case "$flags" in
            -)
                case "${OPTARG}" in
                    help)
                        print_usage | cat
                        exit 1
                    ;;
                    add) 
                        shift
                        add "$1"
                    ;;
                    down)  
                        shift
                        down $1
                    ;;
                    *) break ;;
                esac
            ;; 
            h)
                print_usage
                exit 1
            ;;
            a)
                shift
                add "$1"
            ;;
            d)
                shift
                down "$1"
            ;;
            *)
                break 
            ;;
        esac
    done
    # Get the percen of brightness
    porcent=$(($(brightnessctl g)*100/$(brightnessctl m)))
    # Set the name of the icon or the path
    icon=(brightness-1 brightness-2 brightness-3 brightness-4 brightness-5 brightness-6 brightness-7)
    # With the past icons you take the one you need with respect to percentage
    iconNum=$(( ((($porcent*(${#icon[@]}-1)/10)+5)/10) ))
    dunstify -i "${icon[$iconNum]}" "Brightnes = $porcent" -a some_volume_notifiers -t 1000 -h int:value:$porcent -h string:synchronous:'$bar' --replace=555
fi
